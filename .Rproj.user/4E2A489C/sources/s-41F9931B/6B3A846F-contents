---
title: "Modeling autocorrelated data"
author: "Vojta Bart√°k"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning = FALSE)
```

- prediction / interpolation
- corrected effects and their significance
- 

```{r}
library(tidyverse) # General metapackage for manipuating and visualizing data
library(sf)        # Vector spatial data manipulation and analysis 
library(stars)     # Raster spatial data manipulation and analysis (compatible with sf)
library(tmap)      # Spatial data display
library(spdep)
library(SpatialPack)
library(gstat)     # Geostatistics
library(nlme)      # Generalized least squares
library(spaMM)
library(glmmTMB)
library(spatialreg)
library(mgcv)
library(mgcViz)
library(ranger)
library(spmoran)
library(car)
library(performance)
library(sjPlot)
```


## Data

### Reading and displaying the data

```{r}
prec.sf <- st_read("data/precipitation_2014.shp") %>%
  st_transform(5514) %>%
  mutate(x = st_coordinates(.)[,1],
         y = st_coordinates(.)[,2]) %>% 
  filter(!is.na(Jul))
summary(prec.sf$Jul)
```

```{r}
regions <- st_read("data/kraje.shp")
tm_shape(regions %>% st_union) +
  tm_borders() +
  tm_shape(prec.sf) +
  tm_bubbles("Jul", title.size="Precipitation (mm)")
```

```{r}
dtm <- read_stars("data/dtm_CR_1000.tif")
tm_shape(dtm) + 
  tm_raster(style="cont", palette = terrain.colors(12), title = "Elevation (m a.s.l.)") +
  tm_shape(regions %>% st_union) +
  tm_borders() +
  tm_shape(prec.sf) +
  tm_bubbles(size="Jul", alpha=0, border.col="black", title.size="Precipitation (mm)") +
  tm_layout(legend.position = c("right","top"))
```

### Examining the relationship with elevation

```{r}
prec.sf$elev <- st_extract(dtm, prec.sf) %>% pull(1)
ggplot(prec.sf, aes(x=elev, y=Jul)) +
  geom_point() +
  geom_smooth(se=T) +
  labs(x="Elevation (m a. s.)", y="Precipitation (mm)")
```

```{r}
# linear model
mod.ols <- lm(Jul~elev, data=prec.sf)
summary(mod.ols)
```
```{r}
plot_model(mod.ols, type="eff", terms="elev", show.data=T)
```


```{r}
# residuals
prec.sf$resid.ols <- mod.ols$residuals
prec.sf$resid.ols.abs <- abs(mod.ols$residuals)
prec.sf$resid.ols.sign <- mod.ols$residuals > 0
tm_shape(regions %>% st_union) +
  tm_borders() +
  tm_shape(prec.sf) +
  tm_bubbles(size = "resid.ols.abs", title.size = "Abs OLS residuals (mm)", 
             col = "resid.ols.sign", title.col = "Positive residuals") +
  tm_shape(prec.sf) +
  tm_dots() +
  tm_layout(legend.outside = T)
```

## Correlation

```{r}
cor.test(prec.sf$Jan, prec.sf$elev)
modified.ttest(prec.sf$Jan, prec.sf$elev, st_coordinates(prec.sf))
```


## Generalized least squares

### `gstat` package and kriging

```{r}
vario <- variogram(Jul~1, prec.sf)
vario.elev <- variogram(Jul~elev, prec.sf)
plot(vario); plot(vario.elev)
```

```{r}
(vgm.elev = fit.variogram(vario.elev, model = vgm("Sph")))
plot(vario.elev, vgm.elev)
```

```{r}
(vgm.elev = fit.variogram(vario.elev, model = vgm("Exp")))
plot(vario.elev, vgm.elev)
```

```{r}
(vgm.elev.zero.nugget = fit.variogram(vario.elev, model = vgm(1.2, "Exp", 50000)))
plot(vario.elev, vgm.elev.zero.nugget)
```


```{r}
pred.idw2.0 <- idw(Jul~1, prec.sf, newdata=dtm, idp=2)
pred.idw0.5 <- idw(Jul~1, prec.sf, newdata=dtm, idp=0.5)
pred.idw5.0 <- idw(Jul~1, prec.sf, newdata=dtm, idp=5)
```

```{r}
plot.idw0.5 <- tm_shape(pred.idw0.5 %>% dplyr::select(var1.pred)) +
  tm_raster(title="Precip. (mm)") +
  tm_shape(prec.sf) +
  tm_dots() +
  tm_layout(legend.title.size = 1,
            legend.position = c("RIGHT","TOP"),
            title = "IDW: p = 0.5",
            title.size = 1)
plot.idw2.0 <- tm_shape(pred.idw2.0 %>% dplyr::select(var1.pred)) +
  tm_raster(title="Precip. (mm)") +
  tm_shape(prec.sf) +
  tm_dots() +
  tm_layout(legend.title.size = 1,
            legend.position = c("RIGHT","TOP"),
            title = "IDW: p = 2",
            title.size = 1)
plot.idw5.0 <- tm_shape(pred.idw5.0 %>% dplyr::select(var1.pred)) +
  tm_raster(title="Precip. (mm)") +
  tm_shape(prec.sf) +
  tm_dots() +
  tm_layout(legend.title.size = 1,
            legend.position = c("RIGHT","TOP"),
            title = "IDW: p = 5",
            title.size = 1)
tmap_arrange(plot.idw0.5,plot.idw2.0,plot.idw5.0)
```


```{r}
names(dtm) <- "elev"
pred.krig <- krige(Jul~elev, prec.sf, newdata=dtm, model=vgm.elev)
tm_shape(pred.krig) +
  tm_raster(title=c("Precipitation (mm)", "Kriging variance")) +
  tm_shape(prec.sf) +
  tm_dots() +
  tm_layout(title = "Universal kriging",
            title.size = 1,
            legend.position = c("RIGHT","TOP"),)
```

### Mixed model approach

```{r}
mod.gls <- gls(Jul~elev, 
               data = prec.sf %>% st_drop_geometry, 
               correlation = corExp(form = ~x+y, nugget=T))
summary(mod.gls)
```

```{r}
car::Anova(mod.gls)
# anova(mod.gls, update(mod.gls, ~.-elev))
```


```{r}
plot_model(mod.gls, type="eff", terms="elev", show.data = T)
```

```{r}
r2(mod.gls)
r2(mod.ols)
```

```{r}
mod.spaMM <- fitme(Jul~elev+Matern(1|x+y), data=prec.sf, fixed=list(nu=1.5))  
summary(mod.spaMM, verbose=T)
```

```{r}
drop1(mod.spaMM, test="Chisq")
fixlrt <- fixedLRT(Jul~1+Matern(1|x+y), Jul~elev+Matern(1|x+y),
                   method="ML", data=prec.sf, ranFix=list(nu=1.5))
summary(fixlrt,verbose=FALSE)

```

```{r}
d <- prec.sf %>% mutate(pos = numFactor(prec.sf$x, prec.sf$y), group = factor(rep(1, nrow(prec.sf))))
mod.TMB <- glmmTMB(Jul ~ elev + exp(pos + 0 | group), data=d)
s <- summary(mod.TMB)
names(s)
s$coefficients
drop1(mod.TMB, test="Chisq")
```

```{r}
plot_model(mod.TMB, type="eff", terms="elev", show.data=T)
```


## Autoregressive models

```{r}
nb <- knn2nb(knearneigh(st_coordinates(prec.sf), k=12), sym=T)
lw <- nb2listwdist(nb, prec.sf, type="idw", alpha=1)

mod.sac <- sacsarlm(Jul~elev, data=prec.sf, listw = lw)
summary(mod.sac)
moran.mc(mod.sac$residuals, lw, 999)

# 1 - logLik(mod.sar)/logLik(sacsarlm(Jul~1, data=prec.sf, listw = lw))

mod.err <- errorsarlm(Jul~elev, data=prec.sf, listw = lw)
summary(mod.err)
moran.mc(mod.err$residuals, lw, 999)

mod.car <- spautolm(Jul~elev, data=prec.sf, listw = lw, family = "CAR")  
summary(mod.car)

mod.lag <- lagsarlm(Jul~elev, data=prec.sf, listw = lw)
summary(mod.lag)
moran.mc(mod.lag$residuals, lw, 999)
```


## Autocovariate models

```{r}
prec.sf$autocov <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 50000, type = "inverse", style="W")
mod.aclm <- lm(Jul~elev+autocov, data=prec.sf)
lm.morantest.exact(mod.aclm, lw)
```


```{r}
morpl <- moran.plot(prec.sf$Jul, nb2listwdist(nb, prec.sf, type="idw", alpha=1, style = "W"))
prec.sf$autocov2 <- morpl$wx
plot(prec.sf$autocov, prec.sf$autocov2)
mod.aclm <- lm(Jul~elev+autocov2, data=prec.sf)
lm.morantest.exact(mod.aclm, lw)
summary(mod.aclm)
```

```{r}
mod.acrf <- ranger(Jul~elev+autocov2, data=prec.sf %>% st_drop_geometry, importance = "impurity")
mod.acrf$variable.importance
mod.acrf$prediction.error
resid.acrf <- mod.acrf$predictions - prec.sf$Jul
moran.mc(resid.acrf, lw, nsim=999)
```

```{r}
newdat <- data.frame(elev = seq(min(prec.sf$elev), max(prec.sf$elev), l=100),
                     autocov2 = mean(prec.sf$autocov2))
newdat$pred <- predict(mod.acrf, data=newdat)$predictions
ggplot(newdat, aes(x=elev, y=pred)) +
  geom_point(data=prec.sf, aes(y=Jul), alpha=.1) +
  geom_line()
```


```{r}
newdat <- data.frame(autocov2 = seq(min(prec.sf$autocov2), max(prec.sf$autocov2), l=100),
                     elev = mean(prec.sf$elev))
newdat$pred <- predict(mod.acrf, data=newdat)$predictions
ggplot(newdat, aes(x=autocov2, y=pred)) +
  geom_point(data=prec.sf, aes(y=Jul), alpha=.1) +
  geom_line()
```

## Using space as fixed predictor

### GAMs

```{r}
mod.gam <- gam(Jul ~ elev + s(x, y), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)

plot(mod.gam)
vis.gam(mod.gam, view = c("x","y"))

p <- getViz(mod.gam)
plot(sm(p, 1)) + 
  l_fitRaster() + 
  l_fitContour() + 
  l_points()

r2(mod.gam)
```


```{r}
mod.gam <- gam(Jul ~ s(elev) + s(x, y, k=100), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)

plot(mod.gam)

p <- getViz(mod.gam)
plot(sm(p, 1)) + 
  l_fitLine(colour = "red") + 
  l_rug(mapping = aes(x=x, y=y), alpha = 0.8) +
  l_ciLine(mul = 5, colour = "blue", linetype = 2) + 
  l_points(shape = 19, size = 1, alpha = 0.1) + 
  theme_classic()

plot(sm(p, 2)) + 
  l_fitRaster() + 
  l_fitContour() + 
  l_points()

r2(mod.gam)
```

### Random Forests

```{r}
mod.rf <- ranger(Jul~elev+x+y, data=prec.sf %>% st_drop_geometry,importance = "impurity")
mod.rf$variable.importance
mod.rf$prediction.error
resid.rf <- mod.rf$predictions - prec.sf$Jul
moran.mc(resid.rf, lw, nsim=999)
```


## Moran's eigenvector mapping

```{r}
meig <- meigen(st_coordinates(prec.sf))
plot(prec.sf %>% mutate(meig = meig$sf[,1]) %>% select(meig))
plot(prec.sf %>% mutate(meig = meig$sf[,2]) %>% select(meig))
plot(prec.sf %>% mutate(meig = meig$sf[,5]) %>% select(meig))
plot(prec.sf %>% mutate(meig = meig$sf[,50]) %>% select(meig))

df <- cbind(prec.sf %>% select(elev, Jul) %>% st_drop_geometry, 
            meig$sf %>% as.data.frame %>% set_names(paste("eig",1:ncol(meig$sf), sep="")))
formula <- paste(c("Jul~elev", paste("eig", 1:ncol(meig$sf), sep="")), collapse = "+")

mod.meiglm <- lm(formula, data=df) %>% step(trace = 0)

summary(mod.meiglm)

car::vif(mod.meiglm)
```

```{r}
mod.meigrf <- ranger(formula, data=df, importance = "impurity")
mod.meigrf$variable.importance %>% sort(decreasing = T)
mod.meigrf$variable.importance %>% sort(decreasing = T) %>% barplot
```


(vgm.elev.zero.nugget = fit.variogram(vario.elev, model = vgm("Exp"), fit.sills = c(T,F)))
plot(vario.elev, vgm.elev.zero.nugget)
(vgm.elev.zero.nugget = fit.variogram(vario.elev, model = vgm(1.2, "Exp", 50000)))
plot(vario.elev, vgm.elev.zero.nugget)
(vgm.elev = fit.variogram(vario.elev, model = vgm("Sph")))
plot(vario.elev, vgm.elev)
library(nlme)
names(prec.sf)
mod.gls <- gls(Jul~elev, data = prec.sf, correlation = corExp(form = ~X+Y, nugget=T))
summary(mod.gls)
library(sjPlot)
plot_model(mod.gls, type="eff")
plot_model(mod.gls, type="eff", terms="Jul")
plot_model(mod.gls, type="eff", terms="elev")
plot_model(mod.gls, type="eff", terms="elev", show.data = T)
ggplot(prec.sf, aes(x=elev, y=Jul)) +
geom_point() +
geom_smooth(se=T) +
labs(x="Elevation (m a. s.)", y="Precipitation (mm)")
ggplot(prec.sf, aes(x=elev, y=Jul)) +
geom_point() +
geom_smooth(method="lm",se=T) +
labs(x="Elevation (m a. s.)", y="Precipitation (mm)")
car::Anova(mod.gls)
drop1(mod.gls)
car::Anova(mod.gls)
drop1(mod.gls)
car::Anova(mod.gls)
AIC(mod.gls)
car::Anova(mod.gls)
anova(mod.gls, update(mod,gls, ~.-elev))
anova(mod.gls, update(mod.gls, ~.-elev))
library(performance)
r2(mod.gls)
r2(mod.ols)
r2(mod.gls)
r2(mod.ols)
library(spaMM)
?Matern
?alarm
"'a"
"\a"
print("\a")
alarm()
alarm()
mod.spaMM <- fitme(Jul~elev+Matern(1|X+Y), data=prec.sf, fixed=list(nu=1.5))
summary(m.spaMM, verbose=T)
summary(mod.spaMM, verbose=T)
Anova(mod.spaMM)
car::Anova(mod.spaMM)
drop1(mod.spaMM)
drop1(mod.spaMM, test="Chisq")
confint(m.spaMM, "elev")
confint(mod.spaMM, "elev")
fixlrt <- fixedLRT(Jul~1+Matern(1|x+y), Jul~elev+Matern(1|x+y),
method="ML", data=prec.sf, ranFix=list(nu=1.5))
fixlrt <- fixedLRT(Jul~1+Matern(1|X+Y), Jul~elev+Matern(1|X+Y),
method="ML", data=prec.sf, ranFix=list(nu=1.5))
summary(fixlrt,verbose=FALSE)
drop1(mod.spaMM, test="Chisq")
drop1(update(mod.spaMM, method="ML"), test="Chisq")
r2(mod.spaMM)
plot_model(mod.spaMM, type="eff", terms="elev", show.data=T)
library(glmmTMB)
d <- prec.sf %>% mutate(pos = numFactor(prec.sf$X, prec.sf$Y), group = factor(rep(1, nrow(prec.sf))))
mod.TMB <- glmmTMB(Jul ~ elev + exp(pos + 0 | group), data=d)
View(d)
summary(mod.TMB)
drop1(mod.TMB, test="Chisq")
r2(mod.TMB)
plot_model(mod.TMB, type="eff", terms="elev", show.data=T)
install.packages("sjstats")
library(sjstats)
citation("sjstat")
citation("sjstats")
sjstats::r2(mod.TMB)
r2(mod.TMB)
performane::r2(mod.TMB)
performance::r2(mod.TMB)
install.packages(c("insight", "performance"), repos = 'https://easystats.r-universe.dev')
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning = FALSE)
library(tidyverse) # General metapackage for manipuating and visualizing data
library(tidyverse) # General metapackage for manipuating and visualizing data
library(sf)        # Vector spatial data manipulation and analysis
library(stars)     # Raster spatial data manipulation and analysis (compatible with sf)
library(tmap)      # Spatial data display
library(gstat)     # Geostatistics
library(nlme)      # Generalized least squares
library(sjPlot)
library(spaMM)
library(glmmTMB)
r2(mod.TMB)
performance::r2(mod.TMB)
library/sjPlot
library(sjPlot)
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning = FALSE)
library(tidyverse) # General metapackage for manipuating and visualizing data
library(tidyverse) # General metapackage for manipuating and visualizing data
library(sf)        # Vector spatial data manipulation and analysis
library(stars)     # Raster spatial data manipulation and analysis (compatible with sf)
library(tmap)      # Spatial data display
library(spdep)
library(gstat)     # Geostatistics
library(nlme)      # Generalized least squares
library(spaMM)
library(glmmTMB)
library(spaMM)
library(glmmTMB)
library(car)
library(performance)
library(car)
library(performance)
library(sjPlot)
remove.packages("spaMM")
install.packages("spaMM")
knitr::opts_chunk$set(echo = TRUE, message= FALSE, warning = FALSE)
library(tidyverse) # General metapackage for manipuating and visualizing data
library(tidyverse) # General metapackage for manipuating and visualizing data
library(sf)        # Vector spatial data manipulation and analysis
library(stars)     # Raster spatial data manipulation and analysis (compatible with sf)
library(tmap)      # Spatial data display
library(stars)     # Raster spatial data manipulation and analysis (compatible with sf)
library(tmap)      # Spatial data display
library(spdep)
library(gstat)     # Geostatistics
library(nlme)      # Generalized least squares
library(spaMM)
library(spaMM)
library(glmmTMB)
library(glmmTMB)
library(car)
library(performance)
library(sjPlot)
pseudoR2(mod.spaMM)
plot_model(mod.gls, type="eff", terms="elev", show.data = T)
plot_model(mod.ols, type="eff", terms="elev", show.data = T)
plot_model(mod.gls, type="eff", terms="elev", show.data = T)
plot_model(mod.gls, type="eff", terms="elev", show.data = T)
plot_model(mod.TMB, type="eff", terms="elev", show.data=T)
plot_model(mod.gls, type="pred", terms="elev", show.data = T)
plot_model(mod.gls, type="eff", terms="elev", show.data = T, data=prec.sf)
?plot_model
r2(mod.gls)
r2(mod.ols)
r2(mod.gls)
mod.gls <- gls(Jul~elev, data = prec.sf %>% st_drop_geometry, correlation = corExp(form = ~X+Y, nugget=T))
plot_model(mod.gls, type="eff", terms="elev", show.data = T)
plot_model(mod.ols, type="eff", terms="elev", show.data = T)
r2(mod.gls)
r2(mod.ols)
r2(mod.gls)
r2(mod.TMB, verbose=F)
summary(mod.TMB, verbose=F)
summary(mod.TMB, verbose=T)
s <- summary(mod.TMB)
names(s)
s$coefficients
nb <- knn2nb(knearneigh(st_coordinates(prec.sf), k=12), sym=F)
lw <- nb2listwdist(nb, prec.sf, type="idw", alpha=0.5)
mod.sar <- sacsarlm(response~predictor, data=df, listw = lw)
library(spatialreg)
mod.sar <- sacsarlm(Jul~elev, data=df, listw = lw)
mod.sar <- sacsarlm(Jul~elev, data=prec.sf, listw = lw)
mod.err <- errorsarlm(Jul~elev, data=prec.sf, listw = lw)
mod.car <- spautolm(Jul~elev, data=prec.sf, listw = lw, family = "CAR")
nb <- knn2nb(knearneigh(st_coordinates(prec.sf), k=12), sym=T)
lw <- nb2listwdist(nb, prec.sf, type="idw", alpha=0.5)
lw <- nb2listwdist(nb, prec.sf, type="idw", alpha=0.5)
mod.sar <- sacsarlm(Jul~elev, data=prec.sf, listw = lw)
mod.err <- errorsarlm(Jul~elev, data=prec.sf, listw = lw)
mod.car <- spautolm(Jul~elev, data=prec.sf, listw = lw, family = "CAR")
mod.car <- spautolm(Jul~elev, data=prec.sf, listw = lw, family = "CAR")
mod.err <- error
mod.err <- errorsarlm(Jul~elev, data=prec.sf, listw = lw)
summary(mod.sar)
mod.err <- errorsarlm(Jul~elev, data=prec.sf, listw = lw)
summary(mod.err)
mod.car <- spautolm(Jul~elev, data=prec.sf, listw = lw, family = "CAR")
summary(mod.car)
r2(mod.sar)
summary(mod.sar)
logLik(mod.sar)
1 - logLik(mod.sar)/logLik(sacsarlm(Jul~1, data=prec.sf, listw = lw))
plot_model(mod.sar, type="eff", terms="elev", show.data=T)
mod.SLX <- lmSLX(Jul~elev, data=prec.sf, listw = lw)
summary(mod.SLX)
?impacts
mod.lag <- lagsarlm(Jul~elev, data=prec.sf, listw = lw)
summary(mod.lag)
library(mgcv)
lm.morantest.exact(mod.SLX, lw)
lm.morantest.exact(mod.sar, lw)
moran.mc(mod.sar$residuals, lw, 999)
moran.mc(mod.SLX$residuals, lw, 999)
lm.morantest.exact(mod.err, lw)
moran.mc(mod.err$residuals, lw, 999)
moran.mc(mod.car$residuals, lw, 999)
lm.morantest.exact(mod.car, lw)
mod.car$residuals
moran.mc(mod.lag$residuals, lw, 999)
summary(mod.lag)
mod.gam <- gam(Jul ~ elev + s(x, y), data=prec.sf)
mod.gam <- gam(Jul ~ elev + s(X, Y), data=prec.sf)
summary(mod.gam)
lm.morantest.exact(mod.gam, lw)
moran.mc(mod.gam$residuals, lw, 999)
mod.gam <- gam(Jul ~ s(elev) + s(X, Y), data=prec.sf)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)
plot_model(mod.gam, type="eff", terms="elev", show.data=T)
mod.gam <- gam(Jul ~ s(elev) + s(X, Y), data=prec.sf %>% st_drop_geometry)
plot_model(mod.gam, type="eff", terms="elev", show.data=T)
plot_model(mod.gam, type="eff", terms="s(elev)", show.data=T)
mod.gam <- gam(Jul ~ elev + s(X, Y), data=prec.sf %>% st_drop_geometry)
plot_model(mod.gam, type="eff", terms="elev", show.data=T)
predict(mode.gam)
predict(mod.gam)
dtm %>% cast("POINT")
dtm %>% st_cast("POINT")
dtm %>% st_as_sf
dtm %>% st_as_sf %>% st_centroid
dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
predict(mod.gam, newdata = newdat %>% mutate(elev = 0))
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = 0))
dtm %>% st_as_sf %>% st_as_stars
dtm %>% st_as_sf %>% st_as_stars %>% plot
dtm %>%
st_as_sf %>%
mutate(sp_eff = newdat$sp_eff) %>%
st_as_stars %>%
plot
dtm %>%
st_as_sf %>%
mutate(sp_eff = newdat$sp_eff) %>%
st_as_stars %>%
tm_shape() +
tm_raster("sp_eff")
newdat %>% st_rasterize(template = dtm)
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster()
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff")
?tm_raster
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = mean(newdat$elev)))
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
?gam
mod.gam <- gam(Jul ~ s(elev) + s(X, Y, k=10), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = mean(newdat$elev)))
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = mean(newdat$elev)))
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
mod.gam <- gam(Jul ~ s(elev) + s(X, Y, k=50), data=prec.sf %>% st_drop_geometry)
mod.gam <- gam(Jul ~ s(elev) + s(X, Y, k=50), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = mean(newdat$elev)))
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
newdat$sp_eff <- predict(mod.gam, newdata = newdat)
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
newdat$sp_eff <- predict(mod.gam, newdata = newdat)
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
moran.mc(mod.gam$residuals, lw, 999)
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat$sp_eff <- predict(mod.gam, newdata = newdat)
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
summary(mod.gam)
mod.gam <- gam(Jul ~ s(elev) + s(X, Y, k=500), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = mean(newdat$elev)))
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
newdat$sp_eff <- predict(mod.gam, newdata = newdat)
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
mod.gam <- gam(Jul ~ elev + s(X, Y), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)
newdat <- dtm %>% st_as_sf %>% st_centroid %>% mutate(X = st_coordinates(.)[,1], Y = st_coordinates(.)[,2])
newdat$sp_eff <- predict(mod.gam, newdata = newdat %>% mutate(elev = mean(newdat$elev)))
newdat %>% st_rasterize(template = dtm) %>% tm_shape() + tm_raster("sp_eff", n=10)
tm_shape(newdat) +
tm_dots("sp_eff")
newdat$sp_eff <- predict(mod.gam, newdata = newdat)
tm_shape(newdat) +
tm_dots("sp_eff")
ac <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 20, type = "inverse")
?autocov_dist
ac <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 10000, type = "inverse")
ac <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 50000, type = "inverse")
ac
ac <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 50000, type = "inverse", style="W")
precsf$autocov <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 50000, type = "inverse", style="W")
prec.sf$autocov <- autocov_dist(prec.sf$Jul, st_coordinates(prec.sf), nbs = 50000, type = "inverse", style="W")
mod.aclm <- lm(Jul~elev+ac, data=prec.sf)
lm.morantest.exact(mod.aclm, lw)
lomor <- localmoran(prec.sf$Jul, lw)
print(lomor)
morpl <- moran.plot(prec.sf$Jul, lw)
morpl
?nb2listwdist
morpl <- moran.plot(prec.sf$Jul, nb2listwdist(nb, prec.sf, type="idw", alpha=1, style = "W"))
morpl
plot(morpl)
morpl
prec.sf$autocov2 <- morpl$wx
plot(prec.sf$autocov, prec.sf$autocov2)
mod.aclm <- lm(Jul~elev+autocov2, data=prec.sf)
lm.morantest.exact(mod.aclm, lw)
summary(mod.aclm)
mod.rf <- ranger(Jul~elev+autocov2, data=prec.sf %>% st_drop_geometry, importance = "impurity")
library(ranger)
mod.rf <- ranger(Jul~elev+autocov2, data=prec.sf %>% st_drop_geometry, importance = "impurity")
residuals(mod.rf)
resid.rf <- mod.rf$predictions - prec.sf$Jul
moran.mc(resid.rf, lw)
moran.mc(resid.rf, lw, nsim=999)
mod.acrf <- ranger(Jul~elev+autocov2, data=prec.sf %>% st_drop_geometry, importance = "impurity")
mod.acrf$variable.importance
mod.acrf$prediction.error
resid.acrf <- mod.rf$predictions - prec.sf$Jul
mod.acrf$prediction.error
moran.mc(resid.acrf, lw, nsim=999)
ggplot(data.frame(x=prec.sf$elev, y=mod.acrf$predictions), aes(x=x, y=y)) +
geom_point()
newdat <- data.frame(elev = seq(min(prec.sf$elev), max(prec.sf$elev), l=100),
autocov2 = mean(prec.sf$autocov2))
newdat$pred <- predict(mod.acrf, data=newdat)
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point()
View(newdat)
predict(mod.acrf, data=newdat)
p <- predict(mod.acrf, data=newdat)
names(p)
newdat$pred <- predict(mod.acrf, data=newdat)$predictions
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point()
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point() +
geom_line()
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point(data=prec.sf, aes(y=Jul), alpha=.3) +
geom_point() +
geom_line()
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point(data=prec.sf, aes(y=Jul), alpha=.1) +
geom_point() +
geom_line()
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point(data=prec.sf, aes(y=Jul), alpha=.1) +
geom_line()
newdat <- data.frame(autocov2 = seq(min(prec.sf$autocov2), max(prec.sf$autocov2), l=100),
elev = mean(prec.sf$elev))
newdat$pred <- predict(mod.acrf, data=newdat)$predictions
ggplot(newdat, aes(x=elev, y=pred)) +
geom_point(data=prec.sf, aes(y=Jul), alpha=.1) +
geom_line()
ggplot(newdat, aes(x=autocov2, y=pred)) +
geom_point(data=prec.sf, aes(y=Jul), alpha=.1) +
geom_line()
library(spmoran)
meig <- meigen(st_coordinates(prec.sf))
names(meig)
plot(meig$sf)
meig$sf
meig$ev
mc <- moran.mc(resid.rf, lw, nsim=999)
?eigenw
?meigen
meig$sf
plot(prec.sf %>% mutate(meig1 = meig$sf[,1]) %>% select(meig1))
plot(prec.sf %>% mutate(meig = meig$sf[,2]) %>% select(meig))
plot(prec.sf %>% mutate(meig = meig$sf[,5]) %>% select(meig))
plot(prec.sf %>% mutate(meig = meig$sf[,50]) %>% select(meig))
eig <- eigenw(lw)
names(eig)
paste("eig", 1:ncol(meig$sf))
paste("Jul~elev", paste("eig", 1:ncol(meig$sf), sep=""), collapse = "+")
paste(c("Jul~elev", paste("eig", 1:ncol(meig$sf), sep="")), collapse = "+")
df <- cbind(prec.sf, meig$sf %>% as.data.frame %>% set_names(paste("eig",1:ncol(meig$sf), sep="")))
mod.meiglm <- lm(formula, data=df)
formula <- paste(c("Jul~elev", paste("eig", 1:ncol(meig$sf), sep="")), collapse = "+")
mod.meiglm <- lm(formula, data=df)
summary(mod.meiglm)
mod.meiglm <- lm(formula, data=df) %>% step
mod.meiglm <- lm(formula, data=df) %>% step(trace = 0)
summary(mod.meiglm)
summary(lm(formula, data=df))
mod.meigrf <- ranger(formula, data=df)
df <- cbind(prec.sf %>% select(elev, Jul),
meig$sf %>% as.data.frame %>% set_names(paste("eig",1:ncol(meig$sf), sep="")))
df <- cbind(prec.sf %>% select(elev, Jul) %>% st_drop_geometry,
meig$sf %>% as.data.frame %>% set_names(paste("eig",1:ncol(meig$sf), sep="")))
mod.meigrf <- ranger(formula, data=df)
mod.meigrf <- ranger(formula, data=df, importance = "impurity")
mod.meigrf$variable.importance
mod.meigrf$variable.importance %>% sort
mod.meigrf$variable.importance %>% sort(decreasing = T)
mod.meigrf$variable.importance %>% sort(decreasing = T) %>% barplot
car::vif(mod.meiglm)
vif(mod.gam)
gam.vcomp(mod.gam)
mod.gam <- gam(Jul ~ s(elev) + s(x, y), data=prec.sf %>% st_drop_geometry)
prec.sf <- st_read("data/precipitation_2014.shp") %>%
st_transform(5514) %>%
mutate(x = st_coordinates(.)[,1],
y = st_coordinates(.)[,2]) %>%
filter(!is.na(Jul))
mod.gam <- gam(Jul ~ s(elev) + s(x, y), data=prec.sf %>% st_drop_geometry)
mod.gam <- gam(Jul ~ elev + s(x, y), data=prec.sf %>% st_drop_geometry)
library(tidyverse) # General metapackage for manipuating and visualizing data
library(sf)        # Vector spatial data manipulation and analysis
library(stars)     # Raster spatial data manipulation and analysis (compatible with sf)
library(tmap)      # Spatial data display
library(spdep)
library(SpatialPack)
library(gstat)     # Geostatistics
library(nlme)      # Generalized least squares
library(spaMM)
library(glmmTMB)
library(spatialreg)
library(mgcv)
library(mgcViz)
library(ranger)
library(spmoran)
library(car)
library(performance)
library(sjPlot)
plot(mod.gam)
mod.gam <- gam(Jul ~ elev + s(x, y), data=prec.sf %>% st_drop_geometry)
View(prec.sf)
prec.sf$elev <- st_extract(dtm, prec.sf) %>% pull(1)
mod.gam <- gam(Jul ~ elev + s(x, y), data=prec.sf %>% st_drop_geometry)
summary(mod.gam)
moran.mc(mod.gam$residuals, lw, 999)
plot(mod.gam)
vis.gam(mod.gam, view = c("x","y"))
p <- getViz(mod.gam)
plot(sm(p, 1)) +
l_fitLine(colour = "red") +
l_rug(mapping = aes(x=x, y=y), alpha = 0.8) +
l_ciLine(mul = 5, colour = "blue", linetype = 2) +
l_points(shape = 19, size = 1, alpha = 0.1) +
theme_classic()
plot(sm(p, 2)) +
l_fitRaster() +
l_fitContour() +
l_points()
mod.gam <- gam(Jul ~ elev + s(x, y), data=prec.sf %>% st_drop_geometry)
plot(sm(p, 1)) +
l_fitRaster() +
l_fitContour() +
l_points()
r2(mod.gam)
mod.gam <- gam(Jul ~ s(elev) + s(x, y, k=100), data=prec.sf %>% st_drop_geometry)
r2(gam)
r2(mod.gam)
knitr::opts_chunk$set(echo = TRUE, warning=F, message=F, cache=T)
xy <- expand.grid(x = seq(st_bbox(ras)[1]+500,st_bbox(ras)[3]-500, l=10),
y = seq(st_bbox(ras)[2]+500,st_bbox(ras)[4]-500, l=10))
ras <- read_stars("dtm_CR.tif") %>%
st_set_crs(5514) %>%
st_crop(st_read("AdministrativniCleneni_v13.gdb","ObcePolygony", quiet=T) %>%
"["(400,))
xy <- expand.grid(x = seq(st_bbox(ras)[1]+500,st_bbox(ras)[3]-500, l=10),
y = seq(st_bbox(ras)[2]+500,st_bbox(ras)[4]-500, l=10))
xy$z <- st_extract(ras, as.matrix(xy))[,1]
xy <- filter(xy, !is.na(z))
acf2 <- function(lag){
shift <- matrix(c(rep(50, nrow(xy)), rep(0, nrow(xy))), ncol = 2)
shift.x <- sample(c(0,lag),size = nrow(xy), replace = T)
shift.y <- lag-shift.x
shift <- matrix(c(shift.x,shift.y), ncol = 2)
xy$z2 <- st_extract(ras, as.matrix(xy[,1:2])+shift)[,1]
s2 <- var(na.omit(c(xy$z, xy$z2)))
m <- mean(na.omit(c(xy$z, xy$z2)))
sum((xy$z-m)*(xy$z2-m), na.rm = T)/((nrow(xy)-1)*s2)
}
xy <- expand.grid(x = seq(st_bbox(ras)[1]+500,st_bbox(ras)[3]-500, l=10),
y = seq(st_bbox(ras)[2]+500,st_bbox(ras)[4]-500, l=10))
xy$z <- st_extract(ras, as.matrix(xy))[,1]
xy <- filter(xy, !is.na(z))
acf2 <- function(lag){
shift <- matrix(c(rep(50, nrow(xy)), rep(0, nrow(xy))), ncol = 2)
shift.x <- sample(c(0,lag),size = nrow(xy), replace = T)
shift.y <- lag-shift.x
shift <- matrix(c(shift.x,shift.y), ncol = 2)
xy$z2 <- st_extract(ras, as.matrix(xy[,1:2])+shift)[,1]
s2 <- var(na.omit(c(xy$z, xy$z2)))
m <- mean(na.omit(c(xy$z, xy$z2)))
sum((xy$z-m)*(xy$z2-m), na.rm = T)/((nrow(xy)-1)*s2)
}
lag=100
shift.x <- sample(c(0,lag),size = nrow(xy), replace = T)
shift.y <- lag-shift.x
shift <- matrix(c(shift.x,shift.y), ncol = 2)
xy$z2 <- st_extract(ras, as.matrix(xy[,1:2])+shift)[,1]
s2 <- var(na.omit(c(xy$z, xy$z2)))
m <- mean(na.omit(c(xy$z, xy$z2)))
corr <- sum((xy$z-m)*(xy$z2-m), na.rm = T)/((nrow(xy)-1)*s2)
ggplot(xy, aes(x=z, y=z2)) +
geom_point(size=.5) +
theme_bw() +
theme(axis.title = element_text(size=8),
title = element_text(size=7),
axis.text = element_text(size=6)) +
labs(x="Measurement at a site",
y="Measurement 100 m away",
title = bquote(italic(r)==.(round(corr, 2))))
